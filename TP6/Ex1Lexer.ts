// Generated from ./Ex1.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class Ex1Lexer extends Lexer {
	public static readonly WS = 1;
	public static readonly NEWLINE = 2;
	public static readonly FUNCTION = 3;
	public static readonly VARIABLE = 4;
	public static readonly ADD = 5;
	public static readonly SUB = 6;
	public static readonly MUL = 7;
	public static readonly DIV = 8;
	public static readonly REM = 9;
	public static readonly INT = 10;
	public static readonly FLOAT = 11;
	public static readonly STRING = 12;
	public static readonly BOOLEAN = 13;
	public static readonly LIST = 14;
	public static readonly LP = 15;
	public static readonly RP = 16;
	public static readonly EQ = 17;
	public static readonly SEMICOLON = 18;
	public static readonly AND = 19;
	public static readonly OR = 20;
	public static readonly NOT = 21;
	public static readonly LSP = 22;
	public static readonly RSP = 23;
	public static readonly COMMA = 24;
	public static readonly BOOL_VALUE = 25;
	public static readonly LB = 26;
	public static readonly RB = 27;
	public static readonly RETURN = 28;
	public static readonly INT_NUMBER = 29;
	public static readonly FLOAT_NUMBER = 30;
	public static readonly STRING_TEXT = 31;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"WS", "NEWLINE", "FUNCTION", "VARIABLE", "ADD", "SUB", "MUL", "DIV", "REM", 
		"INT", "FLOAT", "STRING", "BOOLEAN", "LIST", "LP", "RP", "EQ", "SEMICOLON", 
		"AND", "OR", "NOT", "LSP", "RSP", "COMMA", "BOOL_VALUE", "LB", "RB", "RETURN", 
		"INT_NUMBER", "FLOAT_NUMBER", "STRING_TEXT",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, "'function'", undefined, "'+'", "'-'", 
		"'*'", "'/'", "'%'", "'int'", "'float'", "'string'", "'bool'", "'list'", 
		"'('", "')'", "'='", "';'", "'&&'", "'||'", "'!'", "'['", "']'", "','", 
		undefined, "'{'", "'}'", "'return'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "WS", "NEWLINE", "FUNCTION", "VARIABLE", "ADD", "SUB", "MUL", 
		"DIV", "REM", "INT", "FLOAT", "STRING", "BOOLEAN", "LIST", "LP", "RP", 
		"EQ", "SEMICOLON", "AND", "OR", "NOT", "LSP", "RSP", "COMMA", "BOOL_VALUE", 
		"LB", "RB", "RETURN", "INT_NUMBER", "FLOAT_NUMBER", "STRING_TEXT",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(Ex1Lexer._LITERAL_NAMES, Ex1Lexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return Ex1Lexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(Ex1Lexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "Ex1.g4"; }

	// @Override
	public get ruleNames(): string[] { return Ex1Lexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return Ex1Lexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return Ex1Lexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return Ex1Lexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02!\xCC\b\x01\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
		"\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17" +
		"\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C" +
		"\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x03\x02\x03\x02\x03" +
		"\x02\x03\x02\x03\x03\x06\x03G\n\x03\r\x03\x0E\x03H\x03\x03\x03\x03\x03" +
		"\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
		"\x05\x03\x05\x06\x05X\n\x05\r\x05\x0E\x05Y\x03\x06\x03\x06\x03\x07\x03" +
		"\x07\x03\b\x03\b\x03\t\x03\t\x03\n\x03\n\x03\v\x03\v\x03\v\x03\v\x03\f" +
		"\x03\f\x03\f\x03\f\x03\f\x03\f\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03" +
		"\r\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03" +
		"\x0F\x03\x0F\x03\x10\x03\x10\x03\x11\x03\x11\x03\x12\x03\x12\x03\x13\x03" +
		"\x13\x03\x14\x03\x14\x03\x14\x03\x15\x03\x15\x03\x15\x03\x16\x03\x16\x03" +
		"\x17\x03\x17\x03\x18\x03\x18\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1A\x03" +
		"\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x05\x1A\xA0\n\x1A\x03\x1B" +
		"\x03\x1B\x03\x1C\x03\x1C\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D" +
		"\x03\x1D\x03\x1E\x06\x1E\xAE\n\x1E\r\x1E\x0E\x1E\xAF\x03\x1F\x06\x1F\xB3" +
		"\n\x1F\r\x1F\x0E\x1F\xB4\x03\x1F\x03\x1F\x06\x1F\xB9\n\x1F\r\x1F\x0E\x1F" +
		"\xBA\x03 \x03 \x06 \xBF\n \r \x0E \xC0\x03 \x03 \x03 \x06 \xC6\n \r \x0E" +
		" \xC7\x03 \x05 \xCB\n \x02\x02\x02!\x03\x02\x03\x05\x02\x04\x07\x02\x05" +
		"\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17" +
		"\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13" +
		"%\x02\x14\'\x02\x15)\x02\x16+\x02\x17-\x02\x18/\x02\x191\x02\x1A3\x02" +
		"\x1B5\x02\x1C7\x02\x1D9\x02\x1E;\x02\x1F=\x02 ?\x02!\x03\x02\x07\x04\x02" +
		"\f\f\x0F\x0F\x05\x022;C\\c|\x03\x022;\x03\x02$$\x03\x02))\x02\xD4\x02" +
		"\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02" +
		"\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F" +
		"\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15" +
		"\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B" +
		"\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!" +
		"\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02" +
		"\x02\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02" +
		"\x02/\x03\x02\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02\x02\x02\x025\x03" +
		"\x02\x02\x02\x027\x03\x02\x02\x02\x029\x03\x02\x02\x02\x02;\x03\x02\x02" +
		"\x02\x02=\x03\x02\x02\x02\x02?\x03\x02\x02\x02\x03A\x03\x02\x02\x02\x05" +
		"F\x03\x02\x02\x02\x07L\x03\x02\x02\x02\tU\x03\x02\x02\x02\v[\x03\x02\x02" +
		"\x02\r]\x03\x02\x02\x02\x0F_\x03\x02\x02\x02\x11a\x03\x02\x02\x02\x13" +
		"c\x03\x02\x02\x02\x15e\x03\x02\x02\x02\x17i\x03\x02\x02\x02\x19o\x03\x02" +
		"\x02\x02\x1Bv\x03\x02\x02\x02\x1D{\x03\x02\x02\x02\x1F\x80\x03\x02\x02" +
		"\x02!\x82\x03\x02\x02\x02#\x84\x03\x02\x02\x02%\x86\x03\x02\x02\x02\'" +
		"\x88\x03\x02\x02\x02)\x8B\x03\x02\x02\x02+\x8E\x03\x02\x02\x02-\x90\x03" +
		"\x02\x02\x02/\x92\x03\x02\x02\x021\x94\x03\x02\x02\x023\x9F\x03\x02\x02" +
		"\x025\xA1\x03\x02\x02\x027\xA3\x03\x02\x02\x029\xA5\x03\x02\x02\x02;\xAD" +
		"\x03\x02\x02\x02=\xB2\x03\x02\x02\x02?\xCA\x03\x02\x02\x02AB\x07\"\x02" +
		"\x02BC\x03\x02\x02\x02CD\b\x02\x02\x02D\x04\x03\x02\x02\x02EG\t\x02\x02" +
		"\x02FE\x03\x02\x02\x02GH\x03\x02\x02\x02HF\x03\x02\x02\x02HI\x03\x02\x02" +
		"\x02IJ\x03\x02\x02\x02JK\b\x03\x02\x02K\x06\x03\x02\x02\x02LM\x07h\x02" +
		"\x02MN\x07w\x02\x02NO\x07p\x02\x02OP\x07e\x02\x02PQ\x07v\x02\x02QR\x07" +
		"k\x02\x02RS\x07q\x02\x02ST\x07p\x02\x02T\b\x03\x02\x02\x02UW\x07a\x02" +
		"\x02VX\t\x03\x02\x02WV\x03\x02\x02\x02XY\x03\x02\x02\x02YW\x03\x02\x02" +
		"\x02YZ\x03\x02\x02\x02Z\n\x03\x02\x02\x02[\\\x07-\x02\x02\\\f\x03\x02" +
		"\x02\x02]^\x07/\x02\x02^\x0E\x03\x02\x02\x02_`\x07,\x02\x02`\x10\x03\x02" +
		"\x02\x02ab\x071\x02\x02b\x12\x03\x02\x02\x02cd\x07\'\x02\x02d\x14\x03" +
		"\x02\x02\x02ef\x07k\x02\x02fg\x07p\x02\x02gh\x07v\x02\x02h\x16\x03\x02" +
		"\x02\x02ij\x07h\x02\x02jk\x07n\x02\x02kl\x07q\x02\x02lm\x07c\x02\x02m" +
		"n\x07v\x02\x02n\x18\x03\x02\x02\x02op\x07u\x02\x02pq\x07v\x02\x02qr\x07" +
		"t\x02\x02rs\x07k\x02\x02st\x07p\x02\x02tu\x07i\x02\x02u\x1A\x03\x02\x02" +
		"\x02vw\x07d\x02\x02wx\x07q\x02\x02xy\x07q\x02\x02yz\x07n\x02\x02z\x1C" +
		"\x03\x02\x02\x02{|\x07n\x02\x02|}\x07k\x02\x02}~\x07u\x02\x02~\x7F\x07" +
		"v\x02\x02\x7F\x1E\x03\x02\x02\x02\x80\x81\x07*\x02\x02\x81 \x03\x02\x02" +
		"\x02\x82\x83\x07+\x02\x02\x83\"\x03\x02\x02\x02\x84\x85\x07?\x02\x02\x85" +
		"$\x03\x02\x02\x02\x86\x87\x07=\x02\x02\x87&\x03\x02\x02\x02\x88\x89\x07" +
		"(\x02\x02\x89\x8A\x07(\x02\x02\x8A(\x03\x02\x02\x02\x8B\x8C\x07~\x02\x02" +
		"\x8C\x8D\x07~\x02\x02\x8D*\x03\x02\x02\x02\x8E\x8F\x07#\x02\x02\x8F,\x03" +
		"\x02\x02\x02\x90\x91\x07]\x02\x02\x91.\x03\x02\x02\x02\x92\x93\x07_\x02" +
		"\x02\x930\x03\x02\x02\x02\x94\x95\x07.\x02\x02\x952\x03\x02\x02\x02\x96" +
		"\x97\x07v\x02\x02\x97\x98\x07t\x02\x02\x98\x99\x07w\x02\x02\x99\xA0\x07" +
		"g\x02\x02\x9A\x9B\x07h\x02\x02\x9B\x9C\x07c\x02\x02\x9C\x9D\x07n\x02\x02" +
		"\x9D\x9E\x07u\x02\x02\x9E\xA0\x07g\x02\x02\x9F\x96\x03\x02\x02\x02\x9F" +
		"\x9A\x03\x02\x02\x02\xA04\x03\x02\x02\x02\xA1\xA2\x07}\x02\x02\xA26\x03" +
		"\x02\x02\x02\xA3\xA4\x07\x7F\x02\x02\xA48\x03\x02\x02\x02\xA5\xA6\x07" +
		"t\x02\x02\xA6\xA7\x07g\x02\x02\xA7\xA8\x07v\x02\x02\xA8\xA9\x07w\x02\x02" +
		"\xA9\xAA\x07t\x02\x02\xAA\xAB\x07p\x02\x02\xAB:\x03\x02\x02\x02\xAC\xAE" +
		"\t\x04\x02\x02\xAD\xAC\x03\x02\x02\x02\xAE\xAF\x03\x02\x02\x02\xAF\xAD" +
		"\x03\x02\x02\x02\xAF\xB0\x03\x02\x02\x02\xB0<\x03\x02\x02\x02\xB1\xB3" +
		"\t\x04\x02\x02\xB2\xB1\x03\x02\x02\x02\xB3\xB4\x03\x02\x02\x02\xB4\xB2" +
		"\x03\x02\x02\x02\xB4\xB5\x03\x02\x02\x02\xB5\xB6\x03\x02\x02\x02\xB6\xB8" +
		"\x070\x02\x02\xB7\xB9\t\x04\x02\x02\xB8\xB7\x03\x02\x02\x02\xB9\xBA\x03" +
		"\x02\x02\x02\xBA\xB8\x03\x02\x02\x02\xBA\xBB\x03\x02\x02\x02\xBB>\x03" +
		"\x02\x02\x02\xBC\xBE\x07$\x02\x02\xBD\xBF\n\x05\x02\x02\xBE\xBD\x03\x02" +
		"\x02\x02\xBF\xC0\x03\x02\x02\x02\xC0\xBE\x03\x02\x02\x02\xC0\xC1\x03\x02" +
		"\x02\x02\xC1\xC2\x03\x02\x02\x02\xC2\xCB\x07$\x02\x02\xC3\xC5\x07)\x02" +
		"\x02\xC4\xC6\n\x06\x02\x02\xC5\xC4\x03\x02\x02\x02\xC6\xC7\x03\x02\x02" +
		"\x02\xC7\xC5\x03\x02\x02\x02\xC7\xC8\x03\x02\x02\x02\xC8\xC9\x03\x02\x02" +
		"\x02\xC9\xCB\x07)\x02\x02\xCA\xBC\x03\x02\x02\x02\xCA\xC3\x03\x02\x02" +
		"\x02\xCB@\x03\x02\x02\x02\f\x02HY\x9F\xAF\xB4\xBA\xC0\xC7\xCA\x03\b\x02" +
		"\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!Ex1Lexer.__ATN) {
			Ex1Lexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(Ex1Lexer._serializedATN));
		}

		return Ex1Lexer.__ATN;
	}

}

