// Generated from ./Ex1.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class Ex1Lexer extends Lexer {
	public static readonly WS = 1;
	public static readonly NEWLINE = 2;
	public static readonly VARIABLE = 3;
	public static readonly ADD = 4;
	public static readonly SUB = 5;
	public static readonly MUL = 6;
	public static readonly DIV = 7;
	public static readonly REM = 8;
	public static readonly INT = 9;
	public static readonly FLOAT = 10;
	public static readonly STRING = 11;
	public static readonly BOOLEAN = 12;
	public static readonly LP = 13;
	public static readonly RP = 14;
	public static readonly EQ = 15;
	public static readonly SEMICOLON = 16;
	public static readonly INT_NUMBER = 17;
	public static readonly FLOAT_NUMBER = 18;
	public static readonly STRING_TEXT = 19;
	public static readonly TRUE = 20;
	public static readonly FALSE = 21;
	public static readonly OR = 22;
	public static readonly AND = 23;
	public static readonly NOT = 24;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"WS", "NEWLINE", "VARIABLE", "ADD", "SUB", "MUL", "DIV", "REM", "INT", 
		"FLOAT", "STRING", "BOOLEAN", "LP", "RP", "EQ", "SEMICOLON", "INT_NUMBER", 
		"FLOAT_NUMBER", "STRING_TEXT", "TRUE", "FALSE", "OR", "AND", "NOT",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, "'+'", "'-'", "'*'", "'/'", 
		"'%'", "'int'", "'float'", "'string'", "'bool'", "'('", "')'", "'='", 
		"';'", undefined, undefined, undefined, "'true'", "'false'", "'||'", "'&&'", 
		"'!'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "WS", "NEWLINE", "VARIABLE", "ADD", "SUB", "MUL", "DIV", "REM", 
		"INT", "FLOAT", "STRING", "BOOLEAN", "LP", "RP", "EQ", "SEMICOLON", "INT_NUMBER", 
		"FLOAT_NUMBER", "STRING_TEXT", "TRUE", "FALSE", "OR", "AND", "NOT",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(Ex1Lexer._LITERAL_NAMES, Ex1Lexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return Ex1Lexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(Ex1Lexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "Ex1.g4"; }

	// @Override
	public get ruleNames(): string[] { return Ex1Lexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return Ex1Lexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return Ex1Lexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return Ex1Lexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x1A\x9F\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x03\x02\x03\x02\x03\x02\x03\x02\x03\x03" +
		"\x06\x039\n\x03\r\x03\x0E\x03:\x03\x03\x03\x03\x03\x04\x03\x04\x06\x04" +
		"A\n\x04\r\x04\x0E\x04B\x03\x05\x03\x05\x03\x06\x03\x06\x03\x07\x03\x07" +
		"\x03\b\x03\b\x03\t\x03\t\x03\n\x03\n\x03\n\x03\n\x03\v\x03\v\x03\v\x03" +
		"\v\x03\v\x03\v\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\r\x03\r\x03" +
		"\r\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x11" +
		"\x03\x11\x03\x12\x06\x12n\n\x12\r\x12\x0E\x12o\x03\x13\x06\x13s\n\x13" +
		"\r\x13\x0E\x13t\x03\x13\x03\x13\x06\x13y\n\x13\r\x13\x0E\x13z\x03\x14" +
		"\x03\x14\x06\x14\x7F\n\x14\r\x14\x0E\x14\x80\x03\x14\x03\x14\x03\x14\x06" +
		"\x14\x86\n\x14\r\x14\x0E\x14\x87\x03\x14\x05\x14\x8B\n\x14\x03\x15\x03" +
		"\x15\x03\x15\x03\x15\x03\x15\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03" +
		"\x16\x03\x17\x03\x17\x03\x17\x03\x18\x03\x18\x03\x18\x03\x19\x03\x19\x02" +
		"\x02\x02\x1A\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r" +
		"\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B" +
		"\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13%\x02\x14\'\x02\x15" +
		")\x02\x16+\x02\x17-\x02\x18/\x02\x191\x02\x1A\x03\x02\x07\x04\x02\f\f" +
		"\x0F\x0F\x05\x022;C\\c|\x03\x022;\x03\x02$$\x03\x02))\x02\xA6\x02\x03" +
		"\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t" +
		"\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03" +
		"\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03" +
		"\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03" +
		"\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03" +
		"\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02" +
		"\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02" +
		"/\x03\x02\x02\x02\x021\x03\x02\x02\x02\x033\x03\x02\x02\x02\x058\x03\x02" +
		"\x02\x02\x07>\x03\x02\x02\x02\tD\x03\x02\x02\x02\vF\x03\x02\x02\x02\r" +
		"H\x03\x02\x02\x02\x0FJ\x03\x02\x02\x02\x11L\x03\x02\x02\x02\x13N\x03\x02" +
		"\x02\x02\x15R\x03\x02\x02\x02\x17X\x03\x02\x02\x02\x19_\x03\x02\x02\x02" +
		"\x1Bd\x03\x02\x02\x02\x1Df\x03\x02\x02\x02\x1Fh\x03\x02\x02\x02!j\x03" +
		"\x02\x02\x02#m\x03\x02\x02\x02%r\x03\x02\x02\x02\'\x8A\x03\x02\x02\x02" +
		")\x8C\x03\x02\x02\x02+\x91\x03\x02\x02\x02-\x97\x03\x02\x02\x02/\x9A\x03" +
		"\x02\x02\x021\x9D\x03\x02\x02\x0234\x07\"\x02\x0245\x03\x02\x02\x0256" +
		"\b\x02\x02\x026\x04\x03\x02\x02\x0279\t\x02\x02\x0287\x03\x02\x02\x02" +
		"9:\x03\x02\x02\x02:8\x03\x02\x02\x02:;\x03\x02\x02\x02;<\x03\x02\x02\x02" +
		"<=\b\x03\x02\x02=\x06\x03\x02\x02\x02>@\x07a\x02\x02?A\t\x03\x02\x02@" +
		"?\x03\x02\x02\x02AB\x03\x02\x02\x02B@\x03\x02\x02\x02BC\x03\x02\x02\x02" +
		"C\b\x03\x02\x02\x02DE\x07-\x02\x02E\n\x03\x02\x02\x02FG\x07/\x02\x02G" +
		"\f\x03\x02\x02\x02HI\x07,\x02\x02I\x0E\x03\x02\x02\x02JK\x071\x02\x02" +
		"K\x10\x03\x02\x02\x02LM\x07\'\x02\x02M\x12\x03\x02\x02\x02NO\x07k\x02" +
		"\x02OP\x07p\x02\x02PQ\x07v\x02\x02Q\x14\x03\x02\x02\x02RS\x07h\x02\x02" +
		"ST\x07n\x02\x02TU\x07q\x02\x02UV\x07c\x02\x02VW\x07v\x02\x02W\x16\x03" +
		"\x02\x02\x02XY\x07u\x02\x02YZ\x07v\x02\x02Z[\x07t\x02\x02[\\\x07k\x02" +
		"\x02\\]\x07p\x02\x02]^\x07i\x02\x02^\x18\x03\x02\x02\x02_`\x07d\x02\x02" +
		"`a\x07q\x02\x02ab\x07q\x02\x02bc\x07n\x02\x02c\x1A\x03\x02\x02\x02de\x07" +
		"*\x02\x02e\x1C\x03\x02\x02\x02fg\x07+\x02\x02g\x1E\x03\x02\x02\x02hi\x07" +
		"?\x02\x02i \x03\x02\x02\x02jk\x07=\x02\x02k\"\x03\x02\x02\x02ln\t\x04" +
		"\x02\x02ml\x03\x02\x02\x02no\x03\x02\x02\x02om\x03\x02\x02\x02op\x03\x02" +
		"\x02\x02p$\x03\x02\x02\x02qs\t\x04\x02\x02rq\x03\x02\x02\x02st\x03\x02" +
		"\x02\x02tr\x03\x02\x02\x02tu\x03\x02\x02\x02uv\x03\x02\x02\x02vx\x070" +
		"\x02\x02wy\t\x04\x02\x02xw\x03\x02\x02\x02yz\x03\x02\x02\x02zx\x03\x02" +
		"\x02\x02z{\x03\x02\x02\x02{&\x03\x02\x02\x02|~\x07$\x02\x02}\x7F\n\x05" +
		"\x02\x02~}\x03\x02\x02\x02\x7F\x80\x03\x02\x02\x02\x80~\x03\x02\x02\x02" +
		"\x80\x81\x03\x02\x02\x02\x81\x82\x03\x02\x02\x02\x82\x8B\x07$\x02\x02" +
		"\x83\x85\x07)\x02\x02\x84\x86\n\x06\x02\x02\x85\x84\x03\x02\x02\x02\x86" +
		"\x87\x03\x02\x02\x02\x87\x85\x03\x02\x02\x02\x87\x88\x03\x02\x02\x02\x88" +
		"\x89\x03\x02\x02\x02\x89\x8B\x07)\x02\x02\x8A|\x03\x02\x02\x02\x8A\x83" +
		"\x03\x02\x02\x02\x8B(\x03\x02\x02\x02\x8C\x8D\x07v\x02\x02\x8D\x8E\x07" +
		"t\x02\x02\x8E\x8F\x07w\x02\x02\x8F\x90\x07g\x02\x02\x90*\x03\x02\x02\x02" +
		"\x91\x92\x07h\x02\x02\x92\x93\x07c\x02\x02\x93\x94\x07n\x02\x02\x94\x95" +
		"\x07u\x02\x02\x95\x96\x07g\x02\x02\x96,\x03\x02\x02\x02\x97\x98\x07~\x02" +
		"\x02\x98\x99\x07~\x02\x02\x99.\x03\x02\x02\x02\x9A\x9B\x07(\x02\x02\x9B" +
		"\x9C\x07(\x02\x02\x9C0\x03\x02\x02\x02\x9D\x9E\x07#\x02\x02\x9E2\x03\x02" +
		"\x02\x02\v\x02:Botz\x80\x87\x8A\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!Ex1Lexer.__ATN) {
			Ex1Lexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(Ex1Lexer._serializedATN));
		}

		return Ex1Lexer.__ATN;
	}

}

