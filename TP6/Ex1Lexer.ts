// Generated from ./Ex1.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class Ex1Lexer extends Lexer {
	public static readonly WS = 1;
	public static readonly NEWLINE = 2;
	public static readonly VARIABLE = 3;
	public static readonly ADD = 4;
	public static readonly SUB = 5;
	public static readonly MUL = 6;
	public static readonly DIV = 7;
	public static readonly REM = 8;
	public static readonly INT = 9;
	public static readonly FLOAT = 10;
	public static readonly STRING = 11;
	public static readonly BOOLEAN = 12;
	public static readonly LP = 13;
	public static readonly RP = 14;
	public static readonly EQ = 15;
	public static readonly SEMICOLON = 16;
	public static readonly INT_NUMBER = 17;
	public static readonly FLOAT_NUMBER = 18;
	public static readonly STRING_TEXT = 19;
	public static readonly TRUE = 20;
	public static readonly FALSE = 21;
	public static readonly OR = 22;
	public static readonly AND = 23;
	public static readonly NOT = 24;
	public static readonly LIST = 25;
	public static readonly LA = 26;
	public static readonly RA = 27;
	public static readonly COMMA = 28;
	public static readonly FUNCTION = 29;
	public static readonly LF = 30;
	public static readonly RF = 31;
	public static readonly RETURN = 32;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"WS", "NEWLINE", "VARIABLE", "ADD", "SUB", "MUL", "DIV", "REM", "INT", 
		"FLOAT", "STRING", "BOOLEAN", "LP", "RP", "EQ", "SEMICOLON", "INT_NUMBER", 
		"FLOAT_NUMBER", "STRING_TEXT", "TRUE", "FALSE", "OR", "AND", "NOT", "LIST", 
		"LA", "RA", "COMMA", "FUNCTION", "LF", "RF", "RETURN",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, "'+'", "'-'", "'*'", "'/'", 
		"'%'", "'int'", "'float'", "'string'", "'bool'", "'('", "')'", "'='", 
		"';'", undefined, undefined, undefined, "'true'", "'false'", "'||'", "'&&'", 
		"'!'", "'list'", "'['", "']'", "','", "'function'", "'{'", "'}'", "'return'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "WS", "NEWLINE", "VARIABLE", "ADD", "SUB", "MUL", "DIV", "REM", 
		"INT", "FLOAT", "STRING", "BOOLEAN", "LP", "RP", "EQ", "SEMICOLON", "INT_NUMBER", 
		"FLOAT_NUMBER", "STRING_TEXT", "TRUE", "FALSE", "OR", "AND", "NOT", "LIST", 
		"LA", "RA", "COMMA", "FUNCTION", "LF", "RF", "RETURN",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(Ex1Lexer._LITERAL_NAMES, Ex1Lexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return Ex1Lexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(Ex1Lexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "Ex1.g4"; }

	// @Override
	public get ruleNames(): string[] { return Ex1Lexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return Ex1Lexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return Ex1Lexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return Ex1Lexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\"\xCE\b\x01\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
		"\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17" +
		"\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C" +
		"\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x03\x02\x03" +
		"\x02\x03\x02\x03\x02\x03\x03\x06\x03I\n\x03\r\x03\x0E\x03J\x03\x03\x03" +
		"\x03\x03\x04\x03\x04\x06\x04Q\n\x04\r\x04\x0E\x04R\x03\x05\x03\x05\x03" +
		"\x06\x03\x06\x03\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03\n\x03\n\x03\n" +
		"\x03\n\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\f\x03\f\x03\f\x03\f\x03" +
		"\f\x03\f\x03\f\x03\r\x03\r\x03\r\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0F\x03" +
		"\x0F\x03\x10\x03\x10\x03\x11\x03\x11\x03\x12\x06\x12~\n\x12\r\x12\x0E" +
		"\x12\x7F\x03\x13\x06\x13\x83\n\x13\r\x13\x0E\x13\x84\x03\x13\x03\x13\x06" +
		"\x13\x89\n\x13\r\x13\x0E\x13\x8A\x03\x14\x03\x14\x06\x14\x8F\n\x14\r\x14" +
		"\x0E\x14\x90\x03\x14\x03\x14\x03\x14\x06\x14\x96\n\x14\r\x14\x0E\x14\x97" +
		"\x03\x14\x05\x14\x9B\n\x14\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03" +
		"\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x17\x03\x17\x03\x17\x03" +
		"\x18\x03\x18\x03\x18\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03" +
		"\x1A\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x03\x1D\x03\x1D\x03\x1E\x03\x1E\x03" +
		"\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1F\x03\x1F\x03" +
		" \x03 \x03!\x03!\x03!\x03!\x03!\x03!\x03!\x02\x02\x02\"\x03\x02\x03\x05" +
		"\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13" +
		"\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02" +
		"\x11!\x02\x12#\x02\x13%\x02\x14\'\x02\x15)\x02\x16+\x02\x17-\x02\x18/" +
		"\x02\x191\x02\x1A3\x02\x1B5\x02\x1C7\x02\x1D9\x02\x1E;\x02\x1F=\x02 ?" +
		"\x02!A\x02\"\x03\x02\x07\x04\x02\f\f\x0F\x0F\x05\x022;C\\c|\x03\x022;" +
		"\x03\x02$$\x03\x02))\x02\xD5\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02" +
		"\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02" +
		"\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02" +
		"\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02" +
		"\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02" +
		"\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02" +
		"%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02+\x03" +
		"\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x021\x03\x02\x02" +
		"\x02\x023\x03\x02\x02\x02\x025\x03\x02\x02\x02\x027\x03\x02\x02\x02\x02" +
		"9\x03\x02\x02\x02\x02;\x03\x02\x02\x02\x02=\x03\x02\x02\x02\x02?\x03\x02" +
		"\x02\x02\x02A\x03\x02\x02\x02\x03C\x03\x02\x02\x02\x05H\x03\x02\x02\x02" +
		"\x07N\x03\x02\x02\x02\tT\x03\x02\x02\x02\vV\x03\x02\x02\x02\rX\x03\x02" +
		"\x02\x02\x0FZ\x03\x02\x02\x02\x11\\\x03\x02\x02\x02\x13^\x03\x02\x02\x02" +
		"\x15b\x03\x02\x02\x02\x17h\x03\x02\x02\x02\x19o\x03\x02\x02\x02\x1Bt\x03" +
		"\x02\x02\x02\x1Dv\x03\x02\x02\x02\x1Fx\x03\x02\x02\x02!z\x03\x02\x02\x02" +
		"#}\x03\x02\x02\x02%\x82\x03\x02\x02\x02\'\x9A\x03\x02\x02\x02)\x9C\x03" +
		"\x02\x02\x02+\xA1\x03\x02\x02\x02-\xA7\x03\x02\x02\x02/\xAA\x03\x02\x02" +
		"\x021\xAD\x03\x02\x02\x023\xAF\x03\x02\x02\x025\xB4\x03\x02\x02\x027\xB6" +
		"\x03\x02\x02\x029\xB8\x03\x02\x02\x02;\xBA\x03\x02\x02\x02=\xC3\x03\x02" +
		"\x02\x02?\xC5\x03\x02\x02\x02A\xC7\x03\x02\x02\x02CD\x07\"\x02\x02DE\x03" +
		"\x02\x02\x02EF\b\x02\x02\x02F\x04\x03\x02\x02\x02GI\t\x02\x02\x02HG\x03" +
		"\x02\x02\x02IJ\x03\x02\x02\x02JH\x03\x02\x02\x02JK\x03\x02\x02\x02KL\x03" +
		"\x02\x02\x02LM\b\x03\x02\x02M\x06\x03\x02\x02\x02NP\x07a\x02\x02OQ\t\x03" +
		"\x02\x02PO\x03\x02\x02\x02QR\x03\x02\x02\x02RP\x03\x02\x02\x02RS\x03\x02" +
		"\x02\x02S\b\x03\x02\x02\x02TU\x07-\x02\x02U\n\x03\x02\x02\x02VW\x07/\x02" +
		"\x02W\f\x03\x02\x02\x02XY\x07,\x02\x02Y\x0E\x03\x02\x02\x02Z[\x071\x02" +
		"\x02[\x10\x03\x02\x02\x02\\]\x07\'\x02\x02]\x12\x03\x02\x02\x02^_\x07" +
		"k\x02\x02_`\x07p\x02\x02`a\x07v\x02\x02a\x14\x03\x02\x02\x02bc\x07h\x02" +
		"\x02cd\x07n\x02\x02de\x07q\x02\x02ef\x07c\x02\x02fg\x07v\x02\x02g\x16" +
		"\x03\x02\x02\x02hi\x07u\x02\x02ij\x07v\x02\x02jk\x07t\x02\x02kl\x07k\x02" +
		"\x02lm\x07p\x02\x02mn\x07i\x02\x02n\x18\x03\x02\x02\x02op\x07d\x02\x02" +
		"pq\x07q\x02\x02qr\x07q\x02\x02rs\x07n\x02\x02s\x1A\x03\x02\x02\x02tu\x07" +
		"*\x02\x02u\x1C\x03\x02\x02\x02vw\x07+\x02\x02w\x1E\x03\x02\x02\x02xy\x07" +
		"?\x02\x02y \x03\x02\x02\x02z{\x07=\x02\x02{\"\x03\x02\x02\x02|~\t\x04" +
		"\x02\x02}|\x03\x02\x02\x02~\x7F\x03\x02\x02\x02\x7F}\x03\x02\x02\x02\x7F" +
		"\x80\x03\x02\x02\x02\x80$\x03\x02\x02\x02\x81\x83\t\x04\x02\x02\x82\x81" +
		"\x03\x02\x02\x02\x83\x84\x03\x02\x02\x02\x84\x82\x03\x02\x02\x02\x84\x85" +
		"\x03\x02\x02\x02\x85\x86\x03\x02\x02\x02\x86\x88\x070\x02\x02\x87\x89" +
		"\t\x04\x02\x02\x88\x87\x03\x02\x02\x02\x89\x8A\x03\x02\x02\x02\x8A\x88" +
		"\x03\x02\x02\x02\x8A\x8B\x03\x02\x02\x02\x8B&\x03\x02\x02\x02\x8C\x8E" +
		"\x07$\x02\x02\x8D\x8F\n\x05\x02\x02\x8E\x8D\x03\x02\x02\x02\x8F\x90\x03" +
		"\x02\x02\x02\x90\x8E\x03\x02\x02\x02\x90\x91\x03\x02\x02\x02\x91\x92\x03" +
		"\x02\x02\x02\x92\x9B\x07$\x02\x02\x93\x95\x07)\x02\x02\x94\x96\n\x06\x02" +
		"\x02\x95\x94\x03\x02\x02\x02\x96\x97\x03\x02\x02\x02\x97\x95\x03\x02\x02" +
		"\x02\x97\x98\x03\x02\x02\x02\x98\x99\x03\x02\x02\x02\x99\x9B\x07)\x02" +
		"\x02\x9A\x8C\x03\x02\x02\x02\x9A\x93\x03\x02\x02\x02\x9B(\x03\x02\x02" +
		"\x02\x9C\x9D\x07v\x02\x02\x9D\x9E\x07t\x02\x02\x9E\x9F\x07w\x02\x02\x9F" +
		"\xA0\x07g\x02\x02\xA0*\x03\x02\x02\x02\xA1\xA2\x07h\x02\x02\xA2\xA3\x07" +
		"c\x02\x02\xA3\xA4\x07n\x02\x02\xA4\xA5\x07u\x02\x02\xA5\xA6\x07g\x02\x02" +
		"\xA6,\x03\x02\x02\x02\xA7\xA8\x07~\x02\x02\xA8\xA9\x07~\x02\x02\xA9.\x03" +
		"\x02\x02\x02\xAA\xAB\x07(\x02\x02\xAB\xAC\x07(\x02\x02\xAC0\x03\x02\x02" +
		"\x02\xAD\xAE\x07#\x02\x02\xAE2\x03\x02\x02\x02\xAF\xB0\x07n\x02\x02\xB0" +
		"\xB1\x07k\x02\x02\xB1\xB2\x07u\x02\x02\xB2\xB3\x07v\x02\x02\xB34\x03\x02" +
		"\x02\x02\xB4\xB5\x07]\x02\x02\xB56\x03\x02\x02\x02\xB6\xB7\x07_\x02\x02" +
		"\xB78\x03\x02\x02\x02\xB8\xB9\x07.\x02\x02\xB9:\x03\x02\x02\x02\xBA\xBB" +
		"\x07h\x02\x02\xBB\xBC\x07w\x02\x02\xBC\xBD\x07p\x02\x02\xBD\xBE\x07e\x02" +
		"\x02\xBE\xBF\x07v\x02\x02\xBF\xC0\x07k\x02\x02\xC0\xC1\x07q\x02\x02\xC1" +
		"\xC2\x07p\x02\x02\xC2<\x03\x02\x02\x02\xC3\xC4\x07}\x02\x02\xC4>\x03\x02" +
		"\x02\x02\xC5\xC6\x07\x7F\x02\x02\xC6@\x03\x02\x02\x02\xC7\xC8\x07t\x02" +
		"\x02\xC8\xC9\x07g\x02\x02\xC9\xCA\x07v\x02\x02\xCA\xCB\x07w\x02\x02\xCB" +
		"\xCC\x07t\x02\x02\xCC\xCD\x07p\x02\x02\xCDB\x03\x02\x02\x02\v\x02JR\x7F" +
		"\x84\x8A\x90\x97\x9A\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!Ex1Lexer.__ATN) {
			Ex1Lexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(Ex1Lexer._serializedATN));
		}

		return Ex1Lexer.__ATN;
	}

}

