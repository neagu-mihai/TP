// Generated from ./Ex1.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class Ex1Lexer extends Lexer {
	public static readonly WS = 1;
	public static readonly NEWLINE = 2;
	public static readonly VARIABLE = 3;
	public static readonly ADD = 4;
	public static readonly SUB = 5;
	public static readonly MUL = 6;
	public static readonly DIV = 7;
	public static readonly REM = 8;
	public static readonly INT = 9;
	public static readonly FLOAT = 10;
	public static readonly STRING = 11;
	public static readonly BOOLEAN = 12;
	public static readonly LP = 13;
	public static readonly RP = 14;
	public static readonly EQ = 15;
	public static readonly SEMICOLON = 16;
	public static readonly INT_NUMBER = 17;
	public static readonly FLOAT_NUMBER = 18;
	public static readonly STRING_TEXT = 19;
	public static readonly TRUE = 20;
	public static readonly FALSE = 21;
	public static readonly OR = 22;
	public static readonly AND = 23;
	public static readonly NOT = 24;
	public static readonly LIST = 25;
	public static readonly LA = 26;
	public static readonly RA = 27;
	public static readonly COMMA = 28;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"WS", "NEWLINE", "VARIABLE", "ADD", "SUB", "MUL", "DIV", "REM", "INT", 
		"FLOAT", "STRING", "BOOLEAN", "LP", "RP", "EQ", "SEMICOLON", "INT_NUMBER", 
		"FLOAT_NUMBER", "STRING_TEXT", "TRUE", "FALSE", "OR", "AND", "NOT", "LIST", 
		"LA", "RA", "COMMA",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, "'+'", "'-'", "'*'", "'/'", 
		"'%'", "'int'", "'float'", "'string'", "'bool'", "'('", "')'", "'='", 
		"';'", undefined, undefined, undefined, "'true'", "'false'", "'||'", "'&&'", 
		"'!'", "'list'", "'['", "']'", "','",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "WS", "NEWLINE", "VARIABLE", "ADD", "SUB", "MUL", "DIV", "REM", 
		"INT", "FLOAT", "STRING", "BOOLEAN", "LP", "RP", "EQ", "SEMICOLON", "INT_NUMBER", 
		"FLOAT_NUMBER", "STRING_TEXT", "TRUE", "FALSE", "OR", "AND", "NOT", "LIST", 
		"LA", "RA", "COMMA",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(Ex1Lexer._LITERAL_NAMES, Ex1Lexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return Ex1Lexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(Ex1Lexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "Ex1.g4"; }

	// @Override
	public get ruleNames(): string[] { return Ex1Lexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return Ex1Lexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return Ex1Lexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return Ex1Lexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x1E\xB2\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
		"\x1C\x04\x1D\t\x1D\x03\x02\x03\x02\x03\x02\x03\x02\x03\x03\x06\x03A\n" +
		"\x03\r\x03\x0E\x03B\x03\x03\x03\x03\x03\x04\x03\x04\x06\x04I\n\x04\r\x04" +
		"\x0E\x04J\x03\x05\x03\x05\x03\x06\x03\x06\x03\x07\x03\x07\x03\b\x03\b" +
		"\x03\t\x03\t\x03\n\x03\n\x03\n\x03\n\x03\v\x03\v\x03\v\x03\v\x03\v\x03" +
		"\v\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\r\x03\r\x03\r\x03\r\x03" +
		"\r\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x11\x03\x11\x03" +
		"\x12\x06\x12v\n\x12\r\x12\x0E\x12w\x03\x13\x06\x13{\n\x13\r\x13\x0E\x13" +
		"|\x03\x13\x03\x13\x06\x13\x81\n\x13\r\x13\x0E\x13\x82\x03\x14\x03\x14" +
		"\x06\x14\x87\n\x14\r\x14\x0E\x14\x88\x03\x14\x03\x14\x03\x14\x06\x14\x8E" +
		"\n\x14\r\x14\x0E\x14\x8F\x03\x14\x05\x14\x93\n\x14\x03\x15\x03\x15\x03" +
		"\x15\x03\x15\x03\x15\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03" +
		"\x17\x03\x17\x03\x17\x03\x18\x03\x18\x03\x18\x03\x19\x03\x19\x03\x1A\x03" +
		"\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x03\x1D\x03" +
		"\x1D\x02\x02\x02\x1E\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02" +
		"\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02" +
		"\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13%\x02\x14\'" +
		"\x02\x15)\x02\x16+\x02\x17-\x02\x18/\x02\x191\x02\x1A3\x02\x1B5\x02\x1C" +
		"7\x02\x1D9\x02\x1E\x03\x02\x07\x04\x02\f\f\x0F\x0F\x05\x022;C\\c|\x03" +
		"\x022;\x03\x02$$\x03\x02))\x02\xB9\x02\x03\x03\x02\x02\x02\x02\x05\x03" +
		"\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02" +
		"\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02" +
		"\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02" +
		"\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02" +
		"\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02" +
		"\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02" +
		"+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x021\x03\x02" +
		"\x02\x02\x023\x03\x02\x02\x02\x025\x03\x02\x02\x02\x027\x03\x02\x02\x02" +
		"\x029\x03\x02\x02\x02\x03;\x03\x02\x02\x02\x05@\x03\x02\x02\x02\x07F\x03" +
		"\x02\x02\x02\tL\x03\x02\x02\x02\vN\x03\x02\x02\x02\rP\x03\x02\x02\x02" +
		"\x0FR\x03\x02\x02\x02\x11T\x03\x02\x02\x02\x13V\x03\x02\x02\x02\x15Z\x03" +
		"\x02\x02\x02\x17`\x03\x02\x02\x02\x19g\x03\x02\x02\x02\x1Bl\x03\x02\x02" +
		"\x02\x1Dn\x03\x02\x02\x02\x1Fp\x03\x02\x02\x02!r\x03\x02\x02\x02#u\x03" +
		"\x02\x02\x02%z\x03\x02\x02\x02\'\x92\x03\x02\x02\x02)\x94\x03\x02\x02" +
		"\x02+\x99\x03\x02\x02\x02-\x9F\x03\x02\x02\x02/\xA2\x03\x02\x02\x021\xA5" +
		"\x03\x02\x02\x023\xA7\x03\x02\x02\x025\xAC\x03\x02\x02\x027\xAE\x03\x02" +
		"\x02\x029\xB0\x03\x02\x02\x02;<\x07\"\x02\x02<=\x03\x02\x02\x02=>\b\x02" +
		"\x02\x02>\x04\x03\x02\x02\x02?A\t\x02\x02\x02@?\x03\x02\x02\x02AB\x03" +
		"\x02\x02\x02B@\x03\x02\x02\x02BC\x03\x02\x02\x02CD\x03\x02\x02\x02DE\b" +
		"\x03\x02\x02E\x06\x03\x02\x02\x02FH\x07a\x02\x02GI\t\x03\x02\x02HG\x03" +
		"\x02\x02\x02IJ\x03\x02\x02\x02JH\x03\x02\x02\x02JK\x03\x02\x02\x02K\b" +
		"\x03\x02\x02\x02LM\x07-\x02\x02M\n\x03\x02\x02\x02NO\x07/\x02\x02O\f\x03" +
		"\x02\x02\x02PQ\x07,\x02\x02Q\x0E\x03\x02\x02\x02RS\x071\x02\x02S\x10\x03" +
		"\x02\x02\x02TU\x07\'\x02\x02U\x12\x03\x02\x02\x02VW\x07k\x02\x02WX\x07" +
		"p\x02\x02XY\x07v\x02\x02Y\x14\x03\x02\x02\x02Z[\x07h\x02\x02[\\\x07n\x02" +
		"\x02\\]\x07q\x02\x02]^\x07c\x02\x02^_\x07v\x02\x02_\x16\x03\x02\x02\x02" +
		"`a\x07u\x02\x02ab\x07v\x02\x02bc\x07t\x02\x02cd\x07k\x02\x02de\x07p\x02" +
		"\x02ef\x07i\x02\x02f\x18\x03\x02\x02\x02gh\x07d\x02\x02hi\x07q\x02\x02" +
		"ij\x07q\x02\x02jk\x07n\x02\x02k\x1A\x03\x02\x02\x02lm\x07*\x02\x02m\x1C" +
		"\x03\x02\x02\x02no\x07+\x02\x02o\x1E\x03\x02\x02\x02pq\x07?\x02\x02q " +
		"\x03\x02\x02\x02rs\x07=\x02\x02s\"\x03\x02\x02\x02tv\t\x04\x02\x02ut\x03" +
		"\x02\x02\x02vw\x03\x02\x02\x02wu\x03\x02\x02\x02wx\x03\x02\x02\x02x$\x03" +
		"\x02\x02\x02y{\t\x04\x02\x02zy\x03\x02\x02\x02{|\x03\x02\x02\x02|z\x03" +
		"\x02\x02\x02|}\x03\x02\x02\x02}~\x03\x02\x02\x02~\x80\x070\x02\x02\x7F" +
		"\x81\t\x04\x02\x02\x80\x7F\x03\x02\x02\x02\x81\x82\x03\x02\x02\x02\x82" +
		"\x80\x03\x02\x02\x02\x82\x83\x03\x02\x02\x02\x83&\x03\x02\x02\x02\x84" +
		"\x86\x07$\x02\x02\x85\x87\n\x05\x02\x02\x86\x85\x03\x02\x02\x02\x87\x88" +
		"\x03\x02\x02\x02\x88\x86\x03\x02\x02\x02\x88\x89\x03\x02\x02\x02\x89\x8A" +
		"\x03\x02\x02\x02\x8A\x93\x07$\x02\x02\x8B\x8D\x07)\x02\x02\x8C\x8E\n\x06" +
		"\x02\x02\x8D\x8C\x03\x02\x02\x02\x8E\x8F\x03\x02\x02\x02\x8F\x8D\x03\x02" +
		"\x02\x02\x8F\x90\x03\x02\x02\x02\x90\x91\x03\x02\x02\x02\x91\x93\x07)" +
		"\x02\x02\x92\x84\x03\x02\x02\x02\x92\x8B\x03\x02\x02\x02\x93(\x03\x02" +
		"\x02\x02\x94\x95\x07v\x02\x02\x95\x96\x07t\x02\x02\x96\x97\x07w\x02\x02" +
		"\x97\x98\x07g\x02\x02\x98*\x03\x02\x02\x02\x99\x9A\x07h\x02\x02\x9A\x9B" +
		"\x07c\x02\x02\x9B\x9C\x07n\x02\x02\x9C\x9D\x07u\x02\x02\x9D\x9E\x07g\x02" +
		"\x02\x9E,\x03\x02\x02\x02\x9F\xA0\x07~\x02\x02\xA0\xA1\x07~\x02\x02\xA1" +
		".\x03\x02\x02\x02\xA2\xA3\x07(\x02\x02\xA3\xA4\x07(\x02\x02\xA40\x03\x02" +
		"\x02\x02\xA5\xA6\x07#\x02\x02\xA62\x03\x02\x02\x02\xA7\xA8\x07n\x02\x02" +
		"\xA8\xA9\x07k\x02\x02\xA9\xAA\x07u\x02\x02\xAA\xAB\x07v\x02\x02\xAB4\x03" +
		"\x02\x02\x02\xAC\xAD\x07]\x02\x02\xAD6\x03\x02\x02\x02\xAE\xAF\x07_\x02" +
		"\x02\xAF8\x03\x02\x02\x02\xB0\xB1\x07.\x02\x02\xB1:\x03\x02\x02\x02\v" +
		"\x02BJw|\x82\x88\x8F\x92\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!Ex1Lexer.__ATN) {
			Ex1Lexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(Ex1Lexer._serializedATN));
		}

		return Ex1Lexer.__ATN;
	}

}

