// Generated from ./Python.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class PythonLexer extends Lexer {
	public static readonly LP = 1;
	public static readonly RP = 2;
	public static readonly PLUS = 3;
	public static readonly MINUS = 4;
	public static readonly EGAL = 5;
	public static readonly COLON = 6;
	public static readonly SEMICOLON = 7;
	public static readonly LB = 8;
	public static readonly RB = 9;
	public static readonly LSP = 10;
	public static readonly RSP = 11;
	public static readonly MUL = 12;
	public static readonly DIV = 13;
	public static readonly REM = 14;
	public static readonly FOR = 15;
	public static readonly IF = 16;
	public static readonly ELSE = 17;
	public static readonly WHILE = 18;
	public static readonly CLASS = 19;
	public static readonly BREAK = 20;
	public static readonly DEF = 21;
	public static readonly IN = 22;
	public static readonly WS = 23;
	public static readonly INT = 24;
	public static readonly VARIABLE = 25;
	public static readonly FUNCTION_NAME = 26;
	public static readonly FLOAT = 27;
	public static readonly NEWLINE = 28;
	public static readonly STRING = 29;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"LP", "RP", "PLUS", "MINUS", "EGAL", "COLON", "SEMICOLON", "LB", "RB", 
		"LSP", "RSP", "MUL", "DIV", "REM", "FOR", "IF", "ELSE", "WHILE", "CLASS", 
		"BREAK", "DEF", "IN", "WS", "INT", "VARIABLE", "FUNCTION_NAME", "FLOAT", 
		"NEWLINE", "STRING",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'('", "')'", "'+'", "'-'", "'='", "':'", "';'", "'{'", "'}'", 
		"'['", "']'", "'*'", "'/'", "'%'", "'for'", "'if'", "'else'", "'while'", 
		"'class'", "'break'", "'def'", "'in'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "LP", "RP", "PLUS", "MINUS", "EGAL", "COLON", "SEMICOLON", 
		"LB", "RB", "LSP", "RSP", "MUL", "DIV", "REM", "FOR", "IF", "ELSE", "WHILE", 
		"CLASS", "BREAK", "DEF", "IN", "WS", "INT", "VARIABLE", "FUNCTION_NAME", 
		"FLOAT", "NEWLINE", "STRING",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(PythonLexer._LITERAL_NAMES, PythonLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return PythonLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(PythonLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "Python.g4"; }

	// @Override
	public get ruleNames(): string[] { return PythonLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return PythonLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return PythonLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return PythonLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x1F\xB4\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
		"\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04" +
		"\x03\x04\x03\x05\x03\x05\x03\x06\x03\x06\x03\x07\x03\x07\x03\b\x03\b\x03" +
		"\t\x03\t\x03\n\x03\n\x03\v\x03\v\x03\f\x03\f\x03\r\x03\r\x03\x0E\x03\x0E" +
		"\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x10\x03\x10\x03\x11\x03\x11\x03\x11" +
		"\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x13\x03\x13\x03\x13\x03\x13" +
		"\x03\x13\x03\x13\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x15" +
		"\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x16\x03\x16\x03\x16\x03\x16" +
		"\x03\x17\x03\x17\x03\x17\x03\x18\x06\x18\x80\n\x18\r\x18\x0E\x18\x81\x03" +
		"\x19\x06\x19\x85\n\x19\r\x19\x0E\x19\x86\x03\x1A\x06\x1A\x8A\n\x1A\r\x1A" +
		"\x0E\x1A\x8B\x03\x1B\x03\x1B\x07\x1B\x90\n\x1B\f\x1B\x0E\x1B\x93\v\x1B" +
		"\x03\x1C\x06\x1C\x96\n\x1C\r\x1C\x0E\x1C\x97\x03\x1C\x03\x1C\x06\x1C\x9C" +
		"\n\x1C\r\x1C\x0E\x1C\x9D\x03\x1D\x06\x1D\xA1\n\x1D\r\x1D\x0E\x1D\xA2\x03" +
		"\x1E\x03\x1E\x06\x1E\xA7\n\x1E\r\x1E\x0E\x1E\xA8\x03\x1E\x03\x1E\x03\x1E" +
		"\x06\x1E\xAE\n\x1E\r\x1E\x0E\x1E\xAF\x03\x1E\x05\x1E\xB3\n\x1E\x02\x02" +
		"\x02\x1F\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02" +
		"\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02" +
		"\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13%\x02\x14\'\x02\x15)\x02" +
		"\x16+\x02\x17-\x02\x18/\x02\x191\x02\x1A3\x02\x1B5\x02\x1C7\x02\x1D9\x02" +
		"\x1E;\x02\x1F\x03\x02\n\x03\x02\"\"\x03\x022;\x05\x022;C\\c|\x05\x02C" +
		"\\aac|\x06\x022;C\\aac|\x04\x02\f\f\x0F\x0F\x03\x02$$\x03\x02))\x02\xBD" +
		"\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02" +
		"\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02" +
		"\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02" +
		"\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02" +
		"\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02" +
		"!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03" +
		"\x02\x02\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02" +
		"\x02\x02/\x03\x02\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02\x02\x02\x02" +
		"5\x03\x02\x02\x02\x027\x03\x02\x02\x02\x029\x03\x02\x02\x02\x02;\x03\x02" +
		"\x02\x02\x03=\x03\x02\x02\x02\x05?\x03\x02\x02\x02\x07A\x03\x02\x02\x02" +
		"\tC\x03\x02\x02\x02\vE\x03\x02\x02\x02\rG\x03\x02\x02\x02\x0FI\x03\x02" +
		"\x02\x02\x11K\x03\x02\x02\x02\x13M\x03\x02\x02\x02\x15O\x03\x02\x02\x02" +
		"\x17Q\x03\x02\x02\x02\x19S\x03\x02\x02\x02\x1BU\x03\x02\x02\x02\x1DW\x03" +
		"\x02\x02\x02\x1FY\x03\x02\x02\x02!]\x03\x02\x02\x02#`\x03\x02\x02\x02" +
		"%e\x03\x02\x02\x02\'k\x03\x02\x02\x02)q\x03\x02\x02\x02+w\x03\x02\x02" +
		"\x02-{\x03\x02\x02\x02/\x7F\x03\x02\x02\x021\x84\x03\x02\x02\x023\x89" +
		"\x03\x02\x02\x025\x8D\x03\x02\x02\x027\x95\x03\x02\x02\x029\xA0\x03\x02" +
		"\x02\x02;\xB2\x03\x02\x02\x02=>\x07*\x02\x02>\x04\x03\x02\x02\x02?@\x07" +
		"+\x02\x02@\x06\x03\x02\x02\x02AB\x07-\x02\x02B\b\x03\x02\x02\x02CD\x07" +
		"/\x02\x02D\n\x03\x02\x02\x02EF\x07?\x02\x02F\f\x03\x02\x02\x02GH\x07<" +
		"\x02\x02H\x0E\x03\x02\x02\x02IJ\x07=\x02\x02J\x10\x03\x02\x02\x02KL\x07" +
		"}\x02\x02L\x12\x03\x02\x02\x02MN\x07\x7F\x02\x02N\x14\x03\x02\x02\x02" +
		"OP\x07]\x02\x02P\x16\x03\x02\x02\x02QR\x07_\x02\x02R\x18\x03\x02\x02\x02" +
		"ST\x07,\x02\x02T\x1A\x03\x02\x02\x02UV\x071\x02\x02V\x1C\x03\x02\x02\x02" +
		"WX\x07\'\x02\x02X\x1E\x03\x02\x02\x02YZ\x07h\x02\x02Z[\x07q\x02\x02[\\" +
		"\x07t\x02\x02\\ \x03\x02\x02\x02]^\x07k\x02\x02^_\x07h\x02\x02_\"\x03" +
		"\x02\x02\x02`a\x07g\x02\x02ab\x07n\x02\x02bc\x07u\x02\x02cd\x07g\x02\x02" +
		"d$\x03\x02\x02\x02ef\x07y\x02\x02fg\x07j\x02\x02gh\x07k\x02\x02hi\x07" +
		"n\x02\x02ij\x07g\x02\x02j&\x03\x02\x02\x02kl\x07e\x02\x02lm\x07n\x02\x02" +
		"mn\x07c\x02\x02no\x07u\x02\x02op\x07u\x02\x02p(\x03\x02\x02\x02qr\x07" +
		"d\x02\x02rs\x07t\x02\x02st\x07g\x02\x02tu\x07c\x02\x02uv\x07m\x02\x02" +
		"v*\x03\x02\x02\x02wx\x07f\x02\x02xy\x07g\x02\x02yz\x07h\x02\x02z,\x03" +
		"\x02\x02\x02{|\x07k\x02\x02|}\x07p\x02\x02}.\x03\x02\x02\x02~\x80\t\x02" +
		"\x02\x02\x7F~\x03\x02\x02\x02\x80\x81\x03\x02\x02\x02\x81\x7F\x03\x02" +
		"\x02\x02\x81\x82\x03\x02\x02\x02\x820\x03\x02\x02\x02\x83\x85\t\x03\x02" +
		"\x02\x84\x83\x03\x02\x02\x02\x85\x86\x03\x02\x02\x02\x86\x84\x03\x02\x02" +
		"\x02\x86\x87\x03\x02\x02\x02\x872\x03\x02\x02\x02\x88\x8A\t\x04\x02\x02" +
		"\x89\x88\x03\x02\x02\x02\x8A\x8B\x03\x02\x02\x02\x8B\x89\x03\x02\x02\x02" +
		"\x8B\x8C\x03\x02\x02\x02\x8C4\x03\x02\x02\x02\x8D\x91\t\x05\x02\x02\x8E" +
		"\x90\t\x06\x02\x02\x8F\x8E\x03\x02\x02\x02\x90\x93\x03\x02\x02\x02\x91" +
		"\x8F\x03\x02\x02\x02\x91\x92\x03\x02\x02\x02\x926\x03\x02\x02\x02\x93" +
		"\x91\x03\x02\x02\x02\x94\x96\t\x03\x02\x02\x95\x94\x03\x02\x02\x02\x96" +
		"\x97\x03\x02\x02\x02\x97\x95\x03\x02\x02\x02\x97\x98\x03\x02\x02\x02\x98" +
		"\x99\x03\x02\x02\x02\x99\x9B\x070\x02\x02\x9A\x9C\t\x03\x02\x02\x9B\x9A" +
		"\x03\x02\x02\x02\x9C\x9D\x03\x02\x02\x02\x9D\x9B\x03\x02\x02\x02\x9D\x9E" +
		"\x03\x02\x02\x02\x9E8\x03\x02\x02\x02\x9F\xA1\t\x07\x02\x02\xA0\x9F\x03" +
		"\x02\x02\x02\xA1\xA2\x03\x02\x02\x02\xA2\xA0\x03\x02\x02\x02\xA2\xA3\x03" +
		"\x02\x02\x02\xA3:\x03\x02\x02\x02\xA4\xA6\x07$\x02\x02\xA5\xA7\n\b\x02" +
		"\x02\xA6\xA5\x03\x02\x02\x02\xA7\xA8\x03\x02\x02\x02\xA8\xA6\x03\x02\x02" +
		"\x02\xA8\xA9\x03\x02\x02\x02\xA9\xAA\x03\x02\x02\x02\xAA\xB3\x07$\x02" +
		"\x02\xAB\xAD\x07)\x02\x02\xAC\xAE\n\t\x02\x02\xAD\xAC\x03\x02\x02\x02" +
		"\xAE\xAF\x03\x02\x02\x02\xAF\xAD\x03\x02\x02\x02\xAF\xB0\x03\x02\x02\x02" +
		"\xB0\xB1\x03\x02\x02\x02\xB1\xB3\x07)\x02\x02\xB2\xA4\x03\x02\x02\x02" +
		"\xB2\xAB\x03\x02\x02\x02\xB3<\x03\x02\x02\x02\r\x02\x81\x86\x8B\x91\x97" +
		"\x9D\xA2\xA8\xAF\xB2\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!PythonLexer.__ATN) {
			PythonLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(PythonLexer._serializedATN));
		}

		return PythonLexer.__ATN;
	}

}

